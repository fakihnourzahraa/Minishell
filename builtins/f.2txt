some explination:

***cd 
:ok cd yane change directory bt8yre ana wen haliyan ,
cd :yane ruh al home ../cd ~ :mtl cd la wahde ../ cd - : ruh ala ldrc l adim../cd path : ruh ala hayde l path specificaly
.get_target_dir: handle specific case :yane mtl ~ (ruh al home) ,-(ruh al opld dir)
.change_directory : bt3yt lal system call chdir(),ize work bt3yt la update pwd ,ize la bas print error
.update_pwd:bt3ml update lal env (ya old pwd ,ya new dir)
.handle_cd_error: btshuf ize l home wl old pwd exit abl ma est3mlun
.builtin_cd:mqin fct ,btkhud old pwd,figure out wen bnde nruh,tris chdir.
!chdir : change the current working directory to the directory given as path (0 suces,-1 fail)
!getcwd : return the absolute path of current dirct(ia333ze 3tete buff bt3bi bl path ,ize null bt3mll malloc la string big enough to hold path)



***echo
:ok btkb l argument ku ende a standard output ,wby default eend with newline./3ne case echo -n(or -nnnnnn)ma btrj3 al sateer
.is_n_flag:bt3ml check ize fi -n (fa arg lezm yblsh b - b3d - lezm ykun kl char huwe n)
.print_echo: bttb3 kl l argument mn specific start wize fi space bthtu
.builtin_echo:hye main fct hon by default newline = true,wblsh mn arg 1 b3ml skip la echo bshuf ize -n aw la(ize fi newline = false)

***env
:env ize ma mae arg bttb3 kl env li mwjud bl shell,ize fi arg bt3ml run la given arg with the cure env var
.print_env_list:bt3ml print la kl envr li mwjude bl t_env ,bt3ml loop al linked list wprint name -= value
.execute_env_command:executes a command with the current environment mn3ml fork wmn3ml ltest bl child
.builtin_env:main fct,ize no arg:print env avail, ize fi arg: call execute_env_command with them.

***export
:mnst3mle ta nht env variable aw mark them as exported(list of exported variable)
.print_exported_vars:Handles export with no args → prints all exported variables(bt3ml collect la kl vars bi array ,sort them,print them in form declare -x..)
.handle_export_with_value: Handles arguments like VAR=value,bt3ml split la name(abl =)wl value(baad =),bt3ml check lal name ize valid(start with letter or _ ,contain only lett,dig,_)
.set_env_var : create/update the variable in your environment.
.handle_export_without_value:Handles arguments like VAR (without value),Check identifier validity,If variable already exists → mark it as exported,if it doesn’t exist → create it with empty string as value
.builtin_export:main fct ,if no arg:print expor,otherwise loop through each arg if there is = or not

!!!!!
..export can show variables with no value.
..env only shows variables with a value that will be passed to child processes.

***unset
:unset removes variables from the shell,If a variable is exported, it’s also removed from the environment,Only removes valid identifiers.
.builtin_unset → loops args → calls handle_unset_arg(If no arguments → nothing to do, exit status = 0.Loop through all arguments → call handle_unset_arg on each
If no errors occurred → set exit status = 0.)
.handle_unset_arg → checks validity → removes variable from t_env
(Check if arg is a valid variable name.If not → print error and set exit status = 1.
If valid → call unset_env_var to remove it from your t_env linked list.)