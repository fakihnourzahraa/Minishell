***cd :
we do first fct get target dir :this fct is responsible to determine which directory should cd work on it ,no arg or ~ go to home,- go to old pwd 
we do cd_handle_error : to check if home or oldpwd exit
we do update_pwd : getcwd (null,0) its allocate a string contain the absolue path of curr dir 0 mesn allocate as much space u need ,null mean we dont have a buffer

get_target_dir:
Purpose: decide which directory cd should go to.
If no argument or ~ → use $HOME.
If - → use $OLDPWD and print it.
Otherwise → use the argument directly.
If $HOME or $OLDPWD are missing → print error and set exit_status = 1

. handle_cd_error (helper):
Purpose: avoid repeating the same error printing code.
Takes a candidate directory, an error message, and the shell.
If the directory is NULL → prints the error, sets exit_status, returns NULL.
Otherwise → just returns the directory.

update_pwd:
Purpose: after a successful chdir(), update shell environment variables.
Calls getcwd(NULL, 0) to get the new absolute path.
Updates OLDPWD with the previous working directory.
Updates PWD with the new working directory.
Handles getcwd failure with perror.
Frees the allocated new_pwd.

change_directory:
Calls the system function chdir(target) to actually change the process’s working directory.
If chdir fails (e.g., directory doesn’t exist, permission denied), it:
Prints the error using perror.
Sets exit_status = 1.
If it succeeds:
Calls update_pwd to refresh $PWD and $OLDPWD.
Sets exit_status = 0.

void     builtin_c:
This is the main entry for the cd command.
It first saves the current working directory (PWD) in old_pwd.
Then it decides what the target directory should be (using get_target_dir).
If the target cannot be determined (e.g., $HOME or $OLDPWD not set), it returns early.
Otherwise, it calls change_directory to perform the actual directory change and update environment variables.


****env:
we do a helper fct named print_env_list ,calls the helper function to print all exported env variables.
note:
.ft_putstr_fd(str, fd)
Purpose: Prints a string str to the given file descriptor fd.
Usage in builtin_env:
Print error messages to stderr → fd = 2.
Print variable names and values to stdout → fd = 1

.ft_putchar_fd(c, fd)
Purpose: Prints a single character c to the given file descriptor fd.
Usage in builtin_env:
Print the = between NAME and VALUE.
Print the newline \n after each variable.

builtin_env:Check for invalid arguments → print error if any, exit_status = 1.
If valid, call helper to print all exported variables.
Set exit_status = 0 → successful execution.
Uses libft printing functions for all output (ft_putstr_fd, ft_putchar_fd).


****export :
.print_exported_vars:Prints all exported variables in sorted alphabetical order,it is neededd bcz export with no arguments should list all exported variables in bash-compatible format,export with no args
.is_valid_identifier:Checks if a variable name is valid. Bash rules:Must start with a letter or,Can contain letters, digits, _.Prevent invalid env vars
.handle_export_with_value:Handles arguments in the form NAME=value,its needed for Properly sets environment variables and marks them as exported Set value + export
.handle_export_without_value:Handles arguments in the form NAME (no =),Mark existing or create empty var
.collect_exported_vars:Collects all exported variables into a temporary array.Needed for sorting/printing


**unset:

handle_unset_arg(t_shell *shell, char *arg):
Step 1: Checks if the argument is a valid environment variable name using is_valid_identifier.
Valid names: start with a letter or underscore, followed by letters, numbers, or underscores.
Example of invalid: 123VAR, MY-VAR.
Step 2: If invalid:
Print an error message to stderr (fd 2), in Bash style.
Set the shell’s exit status to 1 to signal an error.
Return early → do not try to remove it.
Step 3: If valid:
Call unset_env_var(&shell->env, arg) to remove the variable from the linked list.

builtin_unset(t_cmd *cmd, t_shell *shell):
Purpose: Main function called for the unset builtin.
Step 1: Checks if any arguments are given (cmd->args[1] is first user argument).
No args → do nothing, exit status = 0.
Matches Bash behavior: unset without arguments is valid and does nothing.