***cd :
we do first fct get target dir :this fct is responsible to determine which directory should cd work on it ,no arg or ~ go to home,- go to old pwd 
we do cd_handle_error : to check if home or oldpwd exit
we do update_pwd : getcwd (null,0) its allocate a string contain the absolue path of curr dir 0 mesn allocate as much space u need ,null mean we dont have a buffer

get_target_dir:
Purpose: decide which directory cd should go to.
If no argument or ~ → use $HOME.
If - → use $OLDPWD and print it.
Otherwise → use the argument directly.
If $HOME or $OLDPWD are missing → print error and set exit_status = 1

. handle_cd_error (helper):
Purpose: avoid repeating the same error printing code.
Takes a candidate directory, an error message, and the shell.
If the directory is NULL → prints the error, sets exit_status, returns NULL.
Otherwise → just returns the directory.

update_pwd:
Purpose: after a successful chdir(), update shell environment variables.
Calls getcwd(NULL, 0) to get the new absolute path.
Updates OLDPWD with the previous working directory.
Updates PWD with the new working directory.
Handles getcwd failure with perror.
Frees the allocated new_pwd.

change_directory:
Calls the system function chdir(target) to actually change the process’s working directory.
If chdir fails (e.g., directory doesn’t exist, permission denied), it:
Prints the error using perror.
Sets exit_status = 1.
If it succeeds:
Calls update_pwd to refresh $PWD and $OLDPWD.
Sets exit_status = 0.

void     builtin_c:
This is the main entry for the cd command.
It first saves the current working directory (PWD) in old_pwd.
Then it decides what the target directory should be (using get_target_dir).
If the target cannot be determined (e.g., $HOME or $OLDPWD not set), it returns early.
Otherwise, it calls change_directory to perform the actual directory change and update environment variables.