t_env *init_env_from_envp(char **envp);
this fct is used to convert the array **envp to a linked list t_env
bcz we can store the env in t_env,so it is easy to add,remove,update var dynamically
here we do a static fct bcz it is more than 25 line 
so we call strchr to know where "=" is and return a pointer on it,then we dup the name using strndup(path),then value after = in strdup 
in main we do loop through all string in envp,and call the fct to create node...



t_env *find_env_var(t_env *env, const char *name);
its search in the linked lst for a variable with certain name
we want it bcz we use it inside get_env_value,set_env...


char *get_env_value(t_env *env, const char *name);
its find an envr variable by nam,e and return its value 
need it for expansion and cmnd like echo $user


int set_env_var(t_env **env, const char *name, const char *value, bool available);
its add a new variable if it is not exist ,or update it 
needed in export and cd to update pwd
ok here we do also a static fct bcz more than 25,so first the helper is for create t_env node with name,val,flags
in the main fct we see if it exist or not ,if not we call create env(the helper),if it exist we update it ,we free the old one and dup the new vakue



int unset_env_var(t_env **env, const char *name);
its remove a  variable from linked list
needed in unset
ok the main work of it is to remove the envir variable with a given name from linked list 
so here we handle if we want to remove it if it was the first node or in the middle...


char **env_to_envp(t_env *env);
convert our linked list to char **envp 
bcz when we call execve we must have char **
here we want to convert t_env to **envp,we do helper fct to know how big the array will be
we allocate it +null,we do loop through linked list and allocate 
the length of name +=+value ,then we copy the, we do 4 heper bcz it is sooooooooo long
one for count the var,to allocate ,second is for building "name = value"string from node ,third to free if something fail,
forth loop through t_env to fill **envp ,-1 if malloc fail
main call them only


void free_env_list(t_env *env);
its free the entire linked list to avoid leak 
free_env_list → used for your internal linked list representation of env variables.
free_envp → used for the array of strings you pass to execve.

init_env_from_envp → array → list
env_to_envp → list → array (for execve)
find_env_var / get_env_value → lookup
set_env_var / unset_env_var → modify
free_env_list → cleanup